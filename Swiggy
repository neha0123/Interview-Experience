Swiggy
Round 1:
DSA 
Que 1: As a fleet manager, your responsibility is that you know the number of orders that you have for each building. And you also have the number of available delivery executives with you. So now, you need to essentially optimize your delivery time so that you are able to finish all the orders in the least possible time. So what you will be having is that, let's say, let's for simplicity's sake, that you have a single line, where you have multiple buildings. And you also know that from each building, how many orders you have in your queue. You also know the number of delivery executives that you have. So now, and let's simplify it further, assume that for each delivery, not for delivery to a building, but for each delivery, each executive is taking the same amount of time, for example, five minutes. So now, you need to find out what is the least time possible to complete all orders. So you will be getting two inputs. One is going to be an array with all the orders from a building. And then the second input is going to be the number of delivery executives you have. So if I just give you one example, let's say that I have three buildings, and they have 15, 20, 30 orders. And you have two Ds. By the way, I've also shared the same thing on the meet chat, so if you want to copy paste from there. Where you have put it? Meet chat. Oh, okay. I can't see it on the meet chat. Okay, we will see later. Okay, let me find out. Sure. Sure. So yeah, you have basically an array of size three, with 15, 20, 30, and you have two delivery executives. And one more thing, obviously, one D can deliver on to multiple buildings, right? But for the sake of keeping it optimized, a D cannot deliver, let's say, in first and third buildings. They can only deliver in a continuous pattern of buildings, right? So let's say building 1, 2 is possible, but 1, 3 is not. 1, 3 is possible, but 1, 2 is not, right? No, no, the reverse. 1, 2 is possible, but 1, 3 is not. If he has to deliver to 1 and 3, then he has to deliver for 2 as well, right? Only a continuous line of buildings can be possible. Okay. All right. So now, in this example, right, the answer is going to be, let's say, 35 minutes, assuming it takes one minute, right? That is because you will assign your first D to deliver for buildings 1 and 2, right? That is 15 plus 20 equals 35 minutes. And then the second D is going to deliver for even 30 minutes, right? Only for the last building, all the 30 orders. So your response time, overall response time becomes 35 minutes. Okay. Like this is a single building.

Que 2 what we are going to, so you will be having again two inputs, right? One is going to be a string, right? Another is going to be an array of strings. Okay. So now you have to check whether the string can be broken into individual words such that each individual word is in that list. Okay, so for example, right, if let's say my Yeah, if my input string is this one, okay, I've also shut down the main chapter, right? And this is my list of words. Okay, so in this case I should return true because I can break the string into separate words such that both apple and pen are present. Okay, and I need to return true or false whether is it

Round 2: 
LLD

Input: customer location, []Restaurants (>50k <= 10 mil) - N

Discovery(customer, Restaurants[]) : ([]Restaurant) K(2000 - 4000)

Use case1 : Discover K restaurants nearest to customer by straight line distance (assume earth is flat)
Use case2 : Discover K restaurants nearest to customer which are available by straight line distance (assume earth is flat) 
Use case 3: Discover K restaurants which have 50% offer
Use case 4: Discover highest rating top K restaurants

Functional Requirement:
1.Top K restaurant near.
2. Top k restaurant which isAvailable =true
3.Top k with having discount=50%
4.Top K rating
Future extensible
Filter based on different different criteria(based on rating, amount)

Api: Generic:

Client facing
1. /res/discoveryRestaurant/
Input param-> customer location(latitude& longitude, Strategy strategy)
Output:List<Restaurant>restaurant 

2./res/discoverRes/topKRating()
Input: List<Res>restaurant-N
output->k List<Res>

Entity:
Actor->Customer, Restaurant

1. Restaurant:
Location Location
Bool isAvailable()
Bool hasOffer

2.Location
String lat;
String long;

3.User:
String name;
String phoneNumber;
String emailId;
Location location;

RestaurantService-> Rating logic , addRestaurant(),
UserService->addUser()


Strategy  discoveryStrategy;interface-> topK by availability implementation
List<Res> discover(List<Res>restaurant,Location location);

NearestDistanceStrategy implements discoveryStrategy
NearestOfferStragetgy 
NearestAvailableTopKRestaurant

Aggregation interface{
SortRating()
SortRatingWithSomeOffer();
}

Aggregation implement Rating(){
SortRating(){
}
}

Interface DiscoveryStrategy(){
List<Res> discover(List<Res>restaurant,Location location);

}
NearestDistanceStrategy implements DiscoveryStrategy(){

discover(List<Res>restaurant,Location location){
restaurant.sort();
subList(k);
}


NearestOfferStragetgy implements DiscoveryStrategy(){
discover(List<Res>restaurant,Location location){
return restaurant.filter(hasOfferAvailable).sort().limit(k);
O(N)+O(k)+O(NlogN)->

}

}

NearestAvailableTopKRestaurant implements DiscoveryStrategy(){
c=0;
List<Rest>resultRes;
discover(List<Res>restaurant,Location location){
Return restaurant.filter(isAvailable).sort().limit(k);
O(N)+O(k)+O(NlogN)->


for(auto r: restaurant){
if(isAvailable(r)&&c<=k){
resultRes.add(r);
c++;
}
Else if(>k){
break;
}

discover()//own way;
}
TopKHighestRating implements  DiscoveryStrategy(){
discover()//own way;
}



SortRatingWithSomeOffer  implements  DiscoveryStrategy(){
discover()//own way;
}

abstract DiscoveryStrategy(){
addFilter();
setSort();
discover();
}







